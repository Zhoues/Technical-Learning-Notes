# 图论算法



[TOC]



###### 图的邻接矩阵的初始化——weights矩阵
#define M 101
#define INF 0x3f3f3f3f
int sum;
int main()
{	
	int weights[M][M],edges[M];
	int i,j,k,vertexNum,edgeNum;
	int v1,v2,w;
	scanf("%d %d",&vertexNum,&edgeNum);
	for(i=1;i<=vertexNum;i++)
		for(j=1;j<=vertexNum;j++)
			weights[i][j]=INF;
	for(i=1;i<=edgeNum;i++)
	{
		scanf("%d %d %d",&v1,&v2,&w);
		weights[v1][v2]=w;
		weights[v2][v1]=w;
	}
	MinSpanTree_Prim(weights,vertexNum,1,edges);
	return 0;
}

###### 最小生成树——Prim算法（从0开始）
void MinSpanTree_Prim(int weights[][M],int vertexNum,int FirstVertexID,int *edges)
{// weights为权重数组， vertexNum为顶点个数， FirstVertexID为最小数第一个个节点，edges为最小生成树边
	int min,minweight[M];
	int i,j,k;
	for(i=0;i<vertexNum;i++)	//初始化相关数组 
	{
		minweight[i]=weights[FirstVertexID][i];		//将传入的第一个顶点与之有边的权值存入数组 
		edges[i]=FirstVertexID;		//初始化第一个顶点 
	}
	minweight[FirstVertexID] = 0;	//将第一个顶点加入生成树，0 表示为相应下表的顶点已经加入树 
	//printf("%d ",FirstVertexID);
	for(i=1;i<vertexNum;i++)
	{
		min=INF;
		for(j=0,k=0;j<vertexNum;j++)
			if(minweight[j]!=0 && minweight[j]<min)
			{
				min = minweight[j];
				k=j;				//再数组中找到最小值，其下标为 k 
			}
			//sum+=minweight[k];
			minweight[k] = 0;//找到最小生成树的一个新顶点
			for(j=0;j<vertexNum;j++)	//依次检查新加入的顶点 k 到未加入顶点之间的权值 
				if(minweight[j]!=0 && weights[k][j] < minweight[j])
				{
					minweight[j]=weights[k][j];	//替换操作 
					edges[j]=k;
				}
			//printf("%d ",k);
	}
}

###### 图的邻接矩阵的初始化——edge结构体
struct edge
{
	int u,v;
	int w;
};
struct edge edges[600100];
int i;
int Father[10100];
int cnt;
long long res;
int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	initFather(n);
	int i;
	for(i=0;i<m;++i)
		scanf("%d %d %d",&edges[i].u,&edges[i].v,&edges[i].w);
	qsort(edges,m,sizeof(struct edge),cmp);
	kruskal(n,m);
	printf("%d\n",res);
}

###### 最小生成树——Kruskal算法（并查集）
```c
void initFather(int vertexNum)
{
	int i; 
	for(i=1;i<=vertexNum;++i)
	{
		Father[i]=i;
	}
}
int getFather(int x)
{
	return Father[x]==x?x:(Father[x]=getFather(Father[x]));
}
void kruskal(int vertexNum,int edgeNum)
{
	int p,q;
	cnt=0,res=0;
	

	for(i=0;i<edgeNum;++i)
	{
		p=getFather(edges[i].u);
		q=getFather(edges[i].v);
		if(p!=q)
		{
			Father[p]=q;
			res+=edges[i].w;
			cnt++;
		}
		if(cnt==vertexNum-1)
		{
			break;
		}
	}

}
int cmp(const void*p1,const void*p2)
{
	struct edge *a=(struct edge*)p1;
	struct edge *b=(struct edge*)p2;
	return a->w-b->w;
}
```



###### 最短路径dijkstra
#define M 101
#define INF 0x3f3f3f3f
int prev[M];
int dist[M];
int weights\[M][M];
int path[M],top=0;
void dijkstra(int weights[][M], int vs, int prev[], int dist[], int vertexNum)
{
    int i,j,k;
    int min;
    int tmp;
    int flag[M];      // flag[i]=1表示"顶点vs"到"顶点i"的最短路径已成功获取。

    // 初始化
    for (i = 0; i < vertexNum; i++)
    {
        flag[i] = 0;              // 顶点i的最短路径还没获取到。
        prev[i] = vs;              // 顶点i的前驱顶点为0。
        dist[i] = weights[vs][i];// 顶点i的最短路径为"顶点vs"到"顶点i"的权。
    }
    
    // 对"顶点vs"自身进行初始化
    flag[vs] = 1;
    dist[vs] = 0;
    
    // 遍历G.vexnum-1次；每次找出一个顶点的最短路径。
    for (i = 1; i < vertexNum; i++)
    {
        // 寻找当前最小的路径；
        // 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。
        min = INF;
        for (j = 0; j < vertexNum; j++)
        {
            if (flag[j]==0 && dist[j]<min)
            {
                min = dist[j];
                k = j;
            }
        }
        // 标记"顶点k"为已经获取到最短路径
        flag[k] = 1;
        // 修正当前最短路径和前驱顶点
        // 即，当已经"顶点k的最短路径"之后，更新"未获取最短路径的顶点的最短路径和前驱顶点"。
        for (j = 0; j < vertexNum; j++)
        {
            tmp = (weights[k][j]==INF ? INF : (min + weights[k][j])); // 防止溢出
            if (flag[j] == 0 && (tmp  < dist[j]) )
            {
                dist[j] = tmp;
                prev[j] = k;
            }
        }
    }
}
void getPath(int prev[],int path[],int u,int v)
{
	if(v==u)
	{
		return;
	}	
	else
	{
		path[top]=prev[v];
		top++;
		getPath(prev,path,u,prev[v]);
	}
}
###### 最短路径floyd
void floyd(int v1,int v2)
{
	int i,j,k;
	for(i=0;i<VerNum;i++)
		for(j=0;j<VerNum;j++)
			if(i!=j && map[i][j].weight<INF)
				pathID[i][j]=i;		//初始化 
	for(k=0;k<VerNum;k++)
		for(i=0;i<VerNum;i++)
			for(j=0;j<VerNum;j++)
				if(map[i][j].weight>map[i][k].weight+map[k][j].weight)	//三角形原则更新路径 
				{
					map[i][j].weight=map[i][k].weight+map[k][j].weight;
					pathID[i][j]=pathID[k][j];	//记录编号 
				}
}
###### 图的邻接表初始化
typedef struct edge{
	int adjvex;		//另一端点的位置 
	int weight;		//权重 
	struct edge *next;
}Enode,*Enodep;
typedef struct ver{
	int vertex;		//顶点信息 
	Enode *next;	//Enode的第一个节点 
}Vnode,*Vnodep;
Vnode G[200];
int visited[200]={0};


//访问节点
void VISIT(Vnodep G, int v)
{
	printf("%d ",v);
}

###### 在邻接表形式的图中插入节点
Enodep insertEdge(Enodep head, int num)
{
	Enodep e,p;
	e=(Enodep)malloc(sizeof(Enode));
	e->adjvex=num,e->weight=1,e->next=NULL;
	if(head==NULL)
	{
		head=e;
		return head;
	}
	else
	{
		for(p=head;p->next!=NULL;p=p->next)
			;
		p->next=e;
		return head;
	}
}
###### DFS深度优先遍历
void DFSgraph(Vnodep G, int v)
{
	Enodep p;
	visited[v]=1;
	VISIT(G,v);
	for(p=G[v].next;p!=NULL;p=p->next)
		if(!visited[p->adjvex])		DFSgraph(G,p->adjvex);
}
void travelDFS(Vnodep G,int n)
{
	int i;
	for(i=0;i<n;i++)	visited[i]=0;
	for(i=0;i<n;i++)
		if(!visited[i])		DFSgraph(G,i);
}
###### BFS广度优先遍历
#define MAXSIZE 1000
int  Queue[MAXSIZE];
int  Front,Rear,Count;
void initQueue() 
{
    Front  = 0;
    Rear   = MAXSIZE-1;
    Count = 0;
}
int isEmpty()
{
    return Count == 0;
}
int isFull()
{
    return Count == MAXSIZE;
}
void enQueue(int queue[], int item)
{
    if(isFull())                       /* 队满，插入失败 */  
        exit(0);
    else{
        Rear = (Rear+1) % MAXSIZE; 
        queue[Rear]=item;
        Count++;/* 队未满，插入成功 */                                     
    }
}
int  deQueue(int queue[])
{ 
    int e;
    if(isEmpty())
        exit(0);     /* 队空，删除失败 */
    else{
        e=queue[Front];
        Count--;                             /* 队非空，删除成功 */
        Front = (Front+1)%MAXSIZE;
    	return e;
    }
}
void BFSgraph(Vnodep G,int v)
{
	Enodep p;
	VISIT(G,v);
	visited[v]=1;
	enQueue(Queue,v); 
	while(!isEmpty())
	{
		v = deQueue(Queue);
		p=G[v].next;
		for(;p!=NULL;p=p->next)
			if(!visited[p->adjvex])
			{
				VISIT(G,p->adjvex);
				visited[p->adjvex]=1;
				enQueue(Queue,p->adjvex);
			}
	}	
}
void travelBFS(Vnodep G,int n)
{
	int i;
	for(i=0;i<n;i++)	visited[i]=0;
	for(i=0;i<n;i++)
		if(!visited[i])		BFSgraph(G,i);
}

###### 邻接矩阵的遍历
int weights\[200][200],visited[200]={0},que[200];
int n,m;
void travelDFS(int v)
{
	int i;
	printf("%d ",v);
	visited[v]=1;
	for(i = 0; i < n; i++)
		if (weights[v][i] && !visited[i])
		{
			travelDFS(i);
		}
}
void travelBFS(int v)
{
	int i,head=0,tail=1,tmp;
	que[head]=v;
	while(head<=tail)
	{
		tmp=que[head];
		head++;
		if(visited[tmp])	continue;
		else
		{
			printf("%d ",tmp);
			visited[tmp]=1;
			for(i=0;i<n;i++)
				if (weights\[tmp][i] && !visited[i])
					que[tail++]=i;
		}
	}
}