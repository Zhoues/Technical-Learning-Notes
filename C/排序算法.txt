# 排序算法

[TOC]



##### 快排

```c
qsort(s,n,sizeof(int),compar);
int compar (const void * a, const void * b)
{
    if(*(int*)a > *(int*)b) return 1;
    if(*(int*)a < *(int*)b) return -1;
    if(*(int*)a == *(int*)b) return 0;
}
int compare(const void*p1,const void*p2)
{
	struct student *a=(struct student*)p1;
	struct student *b=(struct student*)p2;
	return a->height>b->height;
}
```



##### 选择排序

```c
void  selectSort(int k[ ],int n)   
{     
	int i, j, d;
    int  temp;
    for(i=0;i<n-1;i++){
        d=i;
        for(j=i+1;j<n;j++)
            if(k[j]<k[d])
            	d=j;
            if(d!=i){                  
            	temp=k[d] ;/* 最小值元素非未排序元素的第一个元素时 */
                k[d]=k[i];
                k[i]=temp;
        }
    }
    
}
```





##### 冒泡排序

```c
void  bubbleSort(int k[],int n)	
{     
	int i, j, flag=1;
    int temp;
    for(i=n-1; i>0 && flag==1; i--){
        flag=0;                        /* 每趟排序前标志flag置0 */ 
        for(j=0;j<i;j++){
            if(k[j]>k[j+1]){
                temp=k[j];
                k[j]=k[j+1];
                k[j+1]=temp;  /* 交换两个元素的位置 */     
                flag=1;              /* 标志flag置1 */ 
            }
        }
    }
}
```



##### 希尔排序

###### 希尔+冒泡

```c
void  shellSort(int k[],int n)
{     
	int  i, j, flag, gap=n;
    int  temp; 
    while(gap>1){
        gap=gap/2;
        do{
            flag=0;                  /* 每趟排序前,标志flag置0 */ 
            for(i=0;i<n–gap;i++){
                j=i+gap;
                if(k[i]>k[j]){
                    temp=k[i];
                    k[i]=k[j];
                    k[j]=temp;
                    flag=1;  
                }
            }
        }while(flag!=0);
    }
}
```





###### 希尔+插入

```c
void  shellSort(int k[],int n)
{    
	int  i, j, gap=n;
    int  temp; 
    while(gap>1){
        gap=gap/2;// 使用插入排序实现子序列排序
        for (i = gap; i < n; i ++)  {
            temp = k[i]
            for (j = i; j >= gap && k[j - gap] > temp; j -= gap)
                k[j] = k[j - gap]
                k[j] = temp
        }
	}
}
```




##### 堆排序

```c
void heapSort(int k[],int n)
{
    int i,
    int  temp;
    for(i=n/2-1;i>=0;i--)
        adjust(k,i,n);
    for(i=n–1;i>=1;i--){
        temp=k[i];
        k[i]=k[0];
        k[0]=temp;
        adjust(k,0,i);
    }
 }
// adjust的三个参数：数组名，待调整二叉树根结点的编号，正在处理的二叉树中的结点的个数
void adjust(int k[ ],int i,int n)
{
    int j,temp;
    temp=k[i];
    j=2*i+1;
    while(j<n){
        if(j<n-1 && k[j]<k[j+1])
            j++;
        if(temp>=k[j])
            break;
        k[(j-1)/2]=k[j];
        j=2*j+1;
    }
    k[(j-1)/2]=temp;
}
```

```
#include <stdio.h>

int heap_size, n;
int heap[2000001];
int buf[2000001];
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
void push(int d)
{
    int now, next;
    heap[++heap_size] = d;
    now = heap_size;
    while (now > 1)
    {
        next = now >> 1;
        if (heap[now] >= heap[next])
            return;
        swap(&heap[now], &heap[next]);
        now = next;
    }
}
int pop()
{
    int now, next, res;
    res = heap[1];
    heap[1] = heap[heap_size--];
    now = 1;
    while (now * 2 <= heap_size)
    {
        next = now * 2;
        if (next < heap_size && heap[next + 1] < heap[next])
            next++;
        if (heap[now] <= heap[next])
            return res;
        swap(&heap[now], &heap[next]);
        now = next;
    }
}
int top()
{
    return heap[1];
}
int main()
{
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        int x;
        scanf("%d", &x);
        if (x == 1)
        {
            scanf("%d", &x);
            push(x);
        }
        else if (x == 3)
        {
            printf("%d", top());
            putchar('\n');
        }
        else
            pop();
    }
    while(heap_size!=0)
    {
        printf("%d ",top());
        pop();
    }
}
```




##### 归并排序

```c
void mergeSort(int k[ ],int n)
{
    int *tmp;
    tmp = (int *)malloc(sizeof(int) * n);
    if(tmp != NULL) {
        mSort(k, tmp, 0, n-1);
        free(tmp);
    } 
    else
        printf("No space for tmp array!!!\n");
}
void mSort(int k[], int tmp[], int left, int right)
{
    int center;
    if(left < right){
        center = (left+right)/2;
        mSort(k, tmp, left, center);
        mSort(k, tmp, center+1, right);
        merge(k, tmp, left, center, right);
    }
}
void merge(int x[ ],int tmp[ ],int left,int leftend,int rightend)
{     
    int i=left, j=leftend+1, q=left;
    while(i<=leftend && j<=rightend)
    {
    	if(x[i]<=x[j]) 
            tmp[q++]=x[i++];
        else
            tmp[q++]=x[j++];
    }     
		while(i<=leftend)
   			tmp[q++]=x[i++];
   		while(j<=rightend)
        	tmp[q++]=x[j++];
        for(i=left; i<=rightend; i++)
           x[i]=tmp[i];
	 
}
```





##### 手写快速排序

```c
void swap(int *a,int *b)  
{  
    int temp = *a;  
    *a = *b;  
    *b = temp;  
}
void quickSort(int k[],int left,int right)
{     
    int i, last;
    if(left<right){
        last=left; 
        for(i=left+1;i<=right;i++)
            if(k[i]<k[left])
                swap(&k[++last],&k[i]); 
        swap(&k[left],&k[last]);
        quickSort(k,left,last-1); 
        quickSort(k,last+1,right);   
    }
}
```

